version: "3"

services:
    frontend:
        image: 1337kavin/piped-frontend:latest
        restart: unless-stopped
        networks:
          - default
        depends_on:
            - backend
        entrypoint: ash -c 'sed -i s/pipedapi.kavin.rocks/pipedapi.magisystem.xyz/g /usr/share/nginx/html/assets/* && /docker-entrypoint.sh && nginx -g "daemon off;"'

    proxy:
        image: 1337kavin/piped-proxy:latest
        restart: unless-stopped
        networks:
          - default
          - outside
        environment:
            - UDS=1
        volumes:
            - piped-proxy:/app/socket

    backend:
        image: 1337kavin/piped:latest
        restart: unless-stopped
        networks:
          - default
          - outside
        volumes:
            - ./backend.properties:/app/config.properties:ro
        depends_on:
            - database

    nginx:
        image: nginx:mainline-alpine
        restart: unless-stopped
        networks:
          - default
          - reverse-proxy-network
        volumes:
            - ./nginx.conf:/etc/nginx/nginx.conf:ro
            - ./config:/etc/nginx/conf.d:ro
            - ./ytproxy.conf:/etc/nginx/snippets/ytproxy.conf:ro
            #- ./config/pipedapi.conf:/etc/nginx/conf.d/pipedapi.conf:ro
            #- ./config/pipedproxy.conf:/etc/nginx/conf.d/pipedproxy.conf:ro
            #- ./config/pipedfrontend.conf:/etc/nginx/conf.d/pipedfrontend.conf:ro
            - piped-proxy:/var/run/ytproxy
        depends_on:
            - backend
            - proxy
            - frontend
        labels:
          traefik.enable: 'true'
          traefik.http.routers.piped.entrypoints: https
          traefik.http.routers.piped.rule: Host(`piped.magisystem.xyz`) || Host(`pipedapi.magisystem.xyz`) || Host(`pipedproxy.magisystem.xyz`)
          traefik.http.services.piped.loadbalancer.server.port: '80'

    database:
        image: postgres:15-alpine
        restart: unless-stopped
        healthcheck:
          test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
          start_period: 20s
          interval: 30s
          retries: 5
          timeout: 5s
        networks:
          - default
        environment:
          POSTGRES_DB: piped
          POSTGRES_USER: piped
          POSTGRES_PASSWORD: '{{ piped_database_pass }}'
        volumes:
            - '{{ (piped_data_folder, "data") | path_join }}:/var/lib/postgresql/data'

volumes:
    piped-proxy: null

networks:
  default:
    internal: true
  outside:
    internal: false
  reverse-proxy-network:
    name: '{{ reverse_proxy_network }}'
    external: true
