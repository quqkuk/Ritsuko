---
- name: Ensuring data folder exists
  ansible.builtin.file:
    path: '{{ authentik_data_folder }}'
    state: directory
    mode: 0755

- name: Creating authentik volume folders
  become: true
  block:
    - name: Checking database folder exists
      ansible.builtin.stat:
        path: '{{ (authentik_data_folder, "data") | path_join }}'
      register: authentik_database_folder
      ignore_errors: true

    - name: Creating database folder
      ansible.builtin.file:
        path: '{{ (authentik_data_folder, "data") | path_join }}'
        state: directory
        mode: 0700
        owner: 101000
        group: 101000
      when: not (authentik_database_folder | community.general.json_query('stat.exists'))
    
    - name: Ensuring worker media folder exists
      become: true
      ansible.builtin.file:
        path: '{{ (authentik_data_folder, "media") | path_join }}'
        state: directory
        mode: 0700
        owner: 101000
        group: 101000
    
    - name: Ensuring custom templates folder exists
      ansible.builtin.file:
        path: '{{ (authentik_data_folder, "custom-templates") | path_join }}'
        state: directory
        mode: 0755
        owner: 101000
        group: 101000
    
    - name: Ensuring certs folder exists
      ansible.builtin.file:
        path: '{{ (authentik_data_folder, "certs") | path_join }}'
        state: directory
        mode: 0700
        owner: 101000
        group: 101000

- name: Ensuring authentik network exists
  community.docker.docker_network:
    name: authentik
    driver: bridge
    internal: true
    state: present

- name: Ensuring authentik ldap network exists
  community.docker.docker_network:
    name: ldap
    driver: bridge
    internal: true
    state: present
  # `authentik_ldap_token` is the token generated by Authentik
  when: authentik_ldap_token is defined

- name: Create Redis container
  community.docker.docker_container:
    name: authentik-redis
    image: redis:alpine
    restart_policy: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    keep_volumes: false
    networks:
      - name: authentik
        aliases:
          - redis

- name: Create PostgreSQL container
  community.docker.docker_container:
    name: authentik-database
    image: postgres:12-alpine
    restart_policy: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    keep_volumes: false
    env:
      POSTGRES_PASSWORD: '{{ authentik_database_pass }}'
      POSTGRES_USER: authentik
      POSTGRES_DB: authentik
    mounts:
      - type: bind
        source: '{{ (authentik_data_folder, "data") | path_join }}'
        target: /var/lib/postgresql/data
    networks:
      - name: authentik
        aliases:
          - database

- name: Create Authentik worker container
  community.docker.docker_container:
    name: authentik-worker
    image: ghcr.io/goauthentik/server
    command: worker
    keep_volumes: false
    restart_policy: unless-stopped
    env: &authentik-env
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: database
      AUTHENTIK_POSTGRESQL__USER: authentik
      AUTHENTIK_POSTGRESQL__NAME: authentik
      AUTHENTIK_POSTGRESQL__PASSWORD: '{{ authentik_database_pass }}'
      AUTHENTIK_SECRET_KEY: '{{ authentik_secret_key }}'
      AUTHENTIK_EMAIL__HOST: mailserver
      AUTHENTIK_EMAIL__PORT: '587'
      AUTHENTIK_EMAIL__USERNAME: ''
      AUTHENTIK_EMAIL__PASSWORD: ''
      AUTHENTIK_EMAIL__USE_TLS: 'false'
      AUTHENTIK_EMAIL__USE_SSL: 'false'
      AUTHENTIK_EMAIL__TIMEOUT: '30'
      AUTHENTIK_EMAIL__FROM: auth@magisystem.xyz
      AUTHENTIK_ERROR_REPORTING__ENABLED: 'false'
      AUTHENTIK_AVATARS: 'attributes.avatar'
    networks:
      - name: authentik
        aliases:
          - worker
      - name: mail
    mounts:
      - type: bind
        source: '{{ (authentik_data_folder, "media") | path_join }}'
        target: /media
      - type: bind
        source: '{{ (authentik_data_folder, "custom-templates") | path_join }}'
        target: /templates
      - type: bind
        source: '{{ (authentik_data_folder, "certs") | path_join }}'
        target: /certs

- name: Create Authentik container
  community.docker.docker_container:
    name: authentik
    image: ghcr.io/goauthentik/server
    command: server
    keep_volumes: false
    restart_policy: unless-stopped
    env: *authentik-env
      #AUTHENTIK_PORT_HTTP: 80
      #AUTHENTIK_PORT_HTTPS: 443
    networks:
      - name: authentik
        aliases:
          - authentik
      - name: mail
      - name: '{{ reverse_proxy_network }}'
    mounts:
      - type: bind
        source: '{{ (authentik_data_folder, "media") | path_join }}'
        target: /media
      - type: bind
        source: '{{ (authentik_data_folder, "custom-templates") | path_join }}'
        target: /templates
    labels:
      traefik.enable: 'true'
      traefik.http.routers.authentik.entryPoints: https
      traefik.http.routers.authentik.rule: Host(`auth.magisystem.xyz`)
      traefik.http.services.authentik.loadbalancer.server.port: '9000'
    #ports:
    #  - 9000:9000
    #  - 9443:9443

- name: Create Authentik LDAP Outpost container
  community.docker.docker_container:
    name: authentik
    image: ghcr.io/goauthentik/ldap
    command: server
    keep_volumes: false
    restart_policy: unless-stopped
    env:
      AUTHENTIK_PORT_LDAP: '389'
      AUTHENTIK_PORT_LDAPS: '636'
      AUTHENTIK_HOST: http://authentik:9000
      AUTHENTIK_INSECURE: 'true'
      AUTHENTIK_TOKEN: '{{ authentik_ldap_token }}'
    networks:
      - name: authentik
        aliases:
          - 'authentik-ldap'
      - name: ldap
        aliases:
          - ldap
  when: authentik_ldap_token is defined
